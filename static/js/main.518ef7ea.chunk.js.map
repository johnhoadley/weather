{"version":3,"sources":["components/weather.component.jsx","components/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","humidity","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.518ef7ea.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div className=\"container text-white\">\r\n            <div className=\"cards pt-4\">\r\n                <h1>\r\n                    {props.city}\r\n                </h1>\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi ${props.weatherIcon} display-1`} />\r\n                </h5>\r\n\r\n                {props.temp_celsius ? (<h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>) : null}\r\n\r\n                {/** show max and min temperatures */}\r\n                {minmaxTemp(props.temp_min, props.temp_max)}\r\n\r\n                {props.humidity ? (<h4 className=\"py-3\">humidity {props.humidity} %</h4>) : null}\r\n                <h4 className=\"py-3\">{props.description}</h4>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nfunction minmaxTemp(min, max) {\r\n\r\n    if (min && max) {\r\n        return (\r\n            <h3>\r\n                <p>min<span className=\"px-4\">{min}&deg;</span></p>\r\n                <p>max<span className=\"px-4\">{max}&deg;</span></p>\r\n            </h3>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport \"./form.style.css\";\r\n\r\nconst Form = props => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div>{props.error ? error() : null}</div>\r\n            <form onSubmit={props.loadweather}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-3 offset-md-2\">\r\n                        <input type=\"text\" className=\"form-control\" name=\"city\" autoComplete=\"off\" placeholder=\"City\" />\r\n                    </div>\r\n                    <div className=\"col-md-3\">\r\n                        <input type=\"text\" className=\"form-control\" name=\"country\" autoComplete=\"off\" placeholder=\"Country\" />\r\n                    </div>\r\n                    <div className=\"col-md-3 md-0 py-2 text-md-left\">\r\n                        <button className=\"btn btn-info\">Get Weather</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction error() {\r\n    return (\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please Enter City and Country\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\n\nimport './App.css';\n\nimport \"weather-icons/css/weather-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Weather from \"./components/weather.component\";\nimport Form from \"./components/form.component\";\n\nconst API_key = \"1a10fec3bab037e361cc5f42e2cb4c19\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      humidity: undefined,\n      description: \"\",\n      error: false\n    };\n\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sprinkle\",\n      Rain: \"wi-rain\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-cloudy\"\n    };\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstorm })\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle })\n        break;\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({ icon: this.weatherIcon.Rain })\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: this.weatherIcon.Snow })\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: this.weatherIcon.Atmosphere })\n        break;\n      case rangeId === 800:\n        this.setState({ icon: this.weatherIcon.Clear })\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: this.weatherIcon.Clouds })\n        break;\n      default:\n        this.setState({ icon: this.weatherIcon.Clouds })\n\n    }\n  }\n\n  getWeather = async (e) => {\n\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    if (city && country) {\n      const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`);\n\n      const response = await api_call.json();\n\n      console.log(response);\n\n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        celsius: this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        humidity: response.main.humidity,\n        description: response.weather[0].description,\n        error: false\n\n      });\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n    } else {\n      this.setState({ error: true })\n    }\n\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error} />\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          temp_celsius={this.state.celsius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          humidity={this.state.humidity}\n          description={this.state.description}\n          weatherIcon={this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}